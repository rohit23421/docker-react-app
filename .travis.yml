# anytime we want to build docker from travis we need to have a super user
sudo : required
services:
  - docker

# it has a series of command that are executed before starting the test or 
# running the project, so we are going to build our docker images before the
# tests we tg the image to our repostiory on github so it would be easy to 
# view it and its a good convention
before_install:
  - docker build -t rohit23421/docker-react -f Dockerfile.dev .

# commands to actually build and run tests from travis
# also anytime we execute a test on travis it either runs sucesfully and exits
# or just fails and here we have a npm run test command which doesnt exits
# although after the tests are passed as it sits and wait for more input if
# user wants to pass,so to exit the npm run test comamnd we hit -- --coverage
# command with some status codes and details
script:
  - docker run rohit23421/docker-react npm run test -- --coverage

# confgurations specified in this section to tell travis ci to take the app
# and set it up to aws elasticbeanstalk
# the app name is the name of the aws elasticbeanstalk app and the env is also
# as the same as in aws,then the bucket name is s3 as because travis takes the
# code from our github it zips them and saves to S3 and elasticbeanstalk 
# can use it to build the app/environment when travis ci instructs it to
# the on tag from travis will command the aws to only build and deploy the
# reposiroy we want to like here master, and to perform all these we need a
# a user for travis to access aws as programatic view so we create a user with
# awseleasticbeanstalk policy and security groups and give the accesskey and
# secret access key for that user to travis using envrionment varibales on 
# travis dashboard and after that we use the environment variables from traivs
# setting dashboard in the yml file using the variables.
deploy:
  provider: elasticbeanstalk
  region: "ap-south-1"
  app: "docker"
  env: "Docker-env"
  bucket_name: "elasticbeanstalk-ap-south-1-348935293553"
  bucket_path: "docker"
  on: 
    branch: master
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key:
    secure: "$AWS_SECRET_KEY"